;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 10/10/2025 10:38:58
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF000EF3F  	GOTO        126
0x0004	0x0000      	NOP
0x0006	0x0000      	NOP
0x0008	0xF000EF00  	GOTO        0
0x000C	0x0000      	NOP
0x000E	0x0000      	NOP
0x0010	0x0000      	NOP
0x0012	0x0000      	NOP
0x0014	0x0000      	NOP
0x0016	0x0000      	NOP
0x0018	0xD7F3      	BRA         0
___FillZeros:
;__Lib_System.c, 18 :: 		void __FillZeros()
;__Lib_System.c, 20 :: 		while ( FSR0 > FSR1 )
L___FillZeros1:
0x001C	0x50EA      	MOVF        FSR0+1, 0 
0x001E	0x5CE2      	SUBWF       FSR1+1, 0 
0x0020	0xE102      	BNZ         L____FillZeros12
0x0022	0x50E9      	MOVF        FSR0, 0 
0x0024	0x5CE1      	SUBWF       FSR1, 0 
L____FillZeros12:
0x0026	0xE202      	BC          L___FillZeros2
;__Lib_System.c, 21 :: 		POSTINC1 = 0;
0x0028	0x6AE6      	CLRF        POSTINC1 
0x002A	0xD7F8      	BRA         L___FillZeros1
L___FillZeros2:
;__Lib_System.c, 22 :: 		}
L_end___FillZeros:
0x002C	0x0012      	RETURN      0
; end of ___FillZeros
_pressed_falling_debounced:
;main.c, 80 :: 		unsigned char pressed_falling_debounced(void) {
;main.c, 82 :: 		unsigned char cur = RB0_bit; // read RB0 now
0x002E	0x0E00      	MOVLW       0
0x0030	0xB081      	BTFSC       RB0_bit, BitPos(RB0_bit+0) 
0x0032	0x0E01      	MOVLW       1
0x0034	0x6E01      	MOVWF       R1 
;main.c, 83 :: 		if (prev == 1 && cur == 0) { // possible falling edge
0x0036	0x5015      	MOVF        pressed_falling_debounced_prev_L0, 0 
0x0038	0x0A01      	XORLW       1
0x003A	0xE115      	BNZ         L_pressed_falling_debounced5
0x003C	0x5001      	MOVF        R1, 0 
0x003E	0x0A00      	XORLW       0
0x0040	0xE112      	BNZ         L_pressed_falling_debounced5
L__pressed_falling_debounced8:
;main.c, 84 :: 		Delay_ms(30); // let the contacts settle
0x0042	0x0E02      	MOVLW       2
0x0044	0x6E0B      	MOVWF       R11, 0
0x0046	0x0E38      	MOVLW       56
0x0048	0x6E0C      	MOVWF       R12, 0
0x004A	0x0EAD      	MOVLW       173
0x004C	0x6E0D      	MOVWF       R13, 0
L_pressed_falling_debounced6:
0x004E	0x2E0D      	DECFSZ      R13, 1, 0
0x0050	0xD7FE      	BRA         L_pressed_falling_debounced6
0x0052	0x2E0C      	DECFSZ      R12, 1, 0
0x0054	0xD7FC      	BRA         L_pressed_falling_debounced6
0x0056	0x2E0B      	DECFSZ      R11, 1, 0
0x0058	0xD7FA      	BRA         L_pressed_falling_debounced6
;main.c, 85 :: 		if (RB0_bit == 0) { // still low, treat as a real press
0x005A	0xB081      	BTFSC       RB0_bit, BitPos(RB0_bit+0) 
0x005C	0xD004      	BRA         L_pressed_falling_debounced7
;main.c, 86 :: 		prev = 0; // update last level
0x005E	0x6A15      	CLRF        pressed_falling_debounced_prev_L0 
;main.c, 87 :: 		return 1; // report a press event
0x0060	0x0E01      	MOVLW       1
0x0062	0x6E00      	MOVWF       R0 
0x0064	0xD003      	BRA         L_end_pressed_falling_debounced
;main.c, 88 :: 		}
L_pressed_falling_debounced7:
;main.c, 89 :: 		}
L_pressed_falling_debounced5:
;main.c, 90 :: 		prev = cur; // no valid press, just update
0x0066	0xF015C001  	MOVFF       R1, pressed_falling_debounced_prev_L0
;main.c, 91 :: 		return 0; // no event
0x006A	0x6A00      	CLRF        R0 
;main.c, 92 :: 		}
L_end_pressed_falling_debounced:
0x006C	0x0012      	RETURN      0
; end of _pressed_falling_debounced
___CC2DW:
;__Lib_System.c, 24 :: 		void __CC2DW()
;__Lib_System.c, 27 :: 		_CC2DL_Loop1:
_CC2DL_Loop1:
;__Lib_System.c, 28 :: 		TBLRD*+
0x006E	0x0009      	TBLRD*+
;__Lib_System.c, 29 :: 		MOVFF TABLAT, POSTINC1
0x0070	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c, 30 :: 		DECF   R0, 1
0x0074	0x0600      	DECF        R0, 1, 0
;__Lib_System.c, 31 :: 		BNZ _CC2DL_Loop1
0x0076	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c, 32 :: 		DECF   R1, 1
0x0078	0x0601      	DECF        R1, 1, 0
;__Lib_System.c, 33 :: 		BNZ _CC2DL_Loop1
0x007A	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c, 35 :: 		}
L_end___CC2DW:
0x007C	0x0012      	RETURN      0
; end of ___CC2DW
0x007E	0xF000EC50  	CALL        160, 0
_main:
0x0082	0x0E01      	MOVLW       1
0x0084	0x6E15      	MOVWF       pressed_falling_debounced_prev_L0 
;main.c, 16 :: 		int main(void)
;main.c, 18 :: 		ANSELB = 0;
0x0086	0x010F      	MOVLB       15
0x0088	0x6B39      	CLRF        ANSELB, 1
;main.c, 19 :: 		ANSELC = 0;
0x008A	0x6B3A      	CLRF        ANSELC, 1
;main.c, 20 :: 		TRISB0_bit = 1; // RB0 input
0x008C	0x8093      	BSF         TRISB0_bit, BitPos(TRISB0_bit+0) 
;main.c, 21 :: 		TRISC0_bit = 0; // RC0 output
0x008E	0x9094      	BCF         TRISC0_bit, BitPos(TRISC0_bit+0) 
;main.c, 22 :: 		LATC0_bit = 0;
0x0090	0x908B      	BCF         LATC0_bit, BitPos(LATC0_bit+0) 
;main.c, 27 :: 		while(1)
L_main0:
;main.c, 66 :: 		if (pressed_falling_debounced()) { // call the helper every loop
0x0092	0xDFCD      	RCALL       _pressed_falling_debounced
0x0094	0x5200      	MOVF        R0, 1 
0x0096	0xA4D8      	BTFSS       STATUS, 2 
;main.c, 67 :: 		LATC0_bit = !LATC0_bit; // toggle LED once per real press
0x0098	0x708B      	BTG         LATC0_bit, BitPos(LATC0_bit+0) 
;main.c, 68 :: 		}
L_main2:
;main.c, 70 :: 		}
0x009A	0xD7FB      	BRA         L_main0
;main.c, 77 :: 		return 0;
;main.c, 78 :: 		}
L_end_main:
0x009C	0xD7FF      	BRA         $+0
; end of _main
0x00A0	0xF015EE10  	LFSR        1, 21
0x00A4	0xF016EE00  	LFSR        0, 22
0x00A8	0xF000EC0E  	CALL        28, 0
0x00AC	0x0012      	RETURN      0
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x001C      [18]    ___FillZeros
0x002E      [64]    _pressed_falling_debounced
0x006E      [16]    ___CC2DW
0x007E      [32]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0015       [1]    pressed_falling_debounced_prev_L0
0x0F39       [1]    ANSELB
0x0F3A       [1]    ANSELC
0x0F81       [0]    RB0_bit
0x0F8B       [0]    LATC0_bit
0x0F93       [0]    TRISB0_bit
0x0F94       [0]    TRISC0_bit
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE1       [2]    FSR1
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [2]    FSR0
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
