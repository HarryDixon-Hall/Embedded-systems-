;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 24/10/2025 10:56:39
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF000EFF4  	GOTO        488
0x0004	0x0000      	NOP
0x0006	0x0000      	NOP
0x0008	0xF000EF00  	GOTO        0
0x000C	0x0000      	NOP
0x000E	0x0000      	NOP
0x0010	0x0000      	NOP
0x0012	0x0000      	NOP
0x0014	0x0000      	NOP
0x0016	0x0000      	NOP
0x0018	0xD7F3      	BRA         0
_Div_8X8_U:
;__Lib_Math.c, 42 :: 		void Div_8X8_U()
;__Lib_Math.c, 45 :: 		CLRF   math_main_global_Remainder_1
0x001C	0x6A08      	CLRF        R8, 0
;__Lib_Math.c, 46 :: 		MOVLW  8
0x001E	0x0E08      	MOVLW       8
;__Lib_Math.c, 47 :: 		MOVWF  math_main_global_LoopCount
0x0020	0x6E0C      	MOVWF       R12, 0
;__Lib_Math.c, 48 :: 		RLCF   math_main_global_X_1,W
0x0022	0x3400      	RLCF        R0, 0, 0
;__Lib_Math.c, 49 :: 		RLCF   math_main_global_Remainder_1,F
0x0024	0x3608      	RLCF        R8, 1, 0
;__Lib_Math.c, 50 :: 		MOVF   math_main_global_Y_1,W
0x0026	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c, 51 :: 		SUBWF  math_main_global_Remainder_1,F
0x0028	0x5E08      	SUBWF       R8, 1, 0
;__Lib_Math.c, 52 :: 		BTFSC  STATUS,C,0
0x002A	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c, 53 :: 		BRA    $+6 //$+3
0x002C	0xD002      	BRA         $+6
;__Lib_Math.c, 54 :: 		ADDWF  math_main_global_Remainder_1,F
0x002E	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c, 55 :: 		BCF    STATUS,C,0
0x0030	0x90D8      	BCF         STATUS, 0, 0
;__Lib_Math.c, 56 :: 		RLCF   math_main_global_X_1,F
0x0032	0x3600      	RLCF        R0, 1, 0
;__Lib_Math.c, 57 :: 		DECFSZ math_main_global_LoopCount,F
0x0034	0x2E0C      	DECFSZ      R12, 1, 0
;__Lib_Math.c, 58 :: 		BRA    $-20 //$-10
0x0036	0xD7F5      	BRA         $-20
;__Lib_Math.c, 66 :: 		* @result The quotient of the division.
L_end_Div_8X8_U:
0x0038	0x0012      	RETURN      0
; end of _Div_8X8_U
_Div_16X16_U:
;__Lib_Math.c, 68 :: 		void Div_16X16_U()
;__Lib_Math.c, 71 :: 		CLRF   math_main_global_Remainder_1
0x003A	0x6A08      	CLRF        R8, 0
;__Lib_Math.c, 72 :: 		CLRF   math_main_global_Remainder_2
0x003C	0x6A09      	CLRF        R9, 0
;__Lib_Math.c, 73 :: 		MOVLW  16
0x003E	0x0E10      	MOVLW       16
;__Lib_Math.c, 74 :: 		MOVWF  math_main_global_LoopCount
0x0040	0x6E0C      	MOVWF       R12, 0
;__Lib_Math.c, 75 :: 		RLCF   math_main_global_X_2,W
0x0042	0x3401      	RLCF        R1, 0, 0
;__Lib_Math.c, 76 :: 		RLCF   math_main_global_Remainder_1,F
0x0044	0x3608      	RLCF        R8, 1, 0
;__Lib_Math.c, 77 :: 		RLCF   math_main_global_Remainder_2,F
0x0046	0x3609      	RLCF        R9, 1, 0
;__Lib_Math.c, 78 :: 		MOVF   math_main_global_Y_1,W
0x0048	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c, 79 :: 		SUBWF  math_main_global_Remainder_1,F
0x004A	0x5E08      	SUBWF       R8, 1, 0
;__Lib_Math.c, 80 :: 		MOVF   math_main_global_Y_2,W
0x004C	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c, 81 :: 		BTFSS  STATUS,C,0
0x004E	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c, 82 :: 		INCFSZ math_main_global_Y_2,W
0x0050	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c, 83 :: 		SUBWF  math_main_global_Remainder_2,F
0x0052	0x5E09      	SUBWF       R9, 1, 0
;__Lib_Math.c, 84 :: 		BTFSC  STATUS,C,0
0x0054	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c, 85 :: 		BRA    $+16 //$+8
0x0056	0xD007      	BRA         $+16
;__Lib_Math.c, 86 :: 		MOVF   math_main_global_Y_1,W
0x0058	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c, 87 :: 		ADDWF  math_main_global_Remainder_1,F
0x005A	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c, 88 :: 		MOVF   math_main_global_Y_2,W
0x005C	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c, 89 :: 		BTFSC  STATUS,C,0
0x005E	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c, 90 :: 		INCFSZ math_main_global_Y_2,W
0x0060	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c, 91 :: 		ADDWF  math_main_global_Remainder_2,F
0x0062	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c, 92 :: 		BCF    STATUS,C,0
0x0064	0x90D8      	BCF         STATUS, 0, 0
;__Lib_Math.c, 93 :: 		RLCF   math_main_global_X_1,F
0x0066	0x3600      	RLCF        R0, 1, 0
;__Lib_Math.c, 94 :: 		RLCF   math_main_global_X_2,F
0x0068	0x3601      	RLCF        R1, 1, 0
;__Lib_Math.c, 95 :: 		DECFSZ math_main_global_LoopCount,F
0x006A	0x2E0C      	DECFSZ      R12, 1, 0
;__Lib_Math.c, 96 :: 		BRA    $-42 //$-21
0x006C	0xD7EA      	BRA         $-42
;__Lib_Math.c, 104 :: 		* @result The quotient of the division.
L_end_Div_16X16_U:
0x006E	0x0012      	RETURN      0
; end of _Div_16X16_U
_seg_for:
;main.c, 35 :: 		unsigned char seg_for(unsigned char d){
;main.c, 39 :: 		return CC[d % 10u];
0x0070	0x0E0A      	MOVLW       10
0x0072	0x6E04      	MOVWF       R4 
0x0074	0xF000C01C  	MOVFF       FARG_seg_for_d, R0
0x0078	0xDFD1      	RCALL       _Div_8X8_U
0x007A	0xF000C008  	MOVFF       R8, R0
0x007E	0x0E14      	MOVLW       seg_for_CC_L0
0x0080	0x2400      	ADDWF       R0, 0 
0x0082	0x6EF6      	MOVWF       TBLPTR 
0x0084	0x0E03      	MOVLW       hi_addr(seg_for_CC_L0)
0x0086	0x6EF7      	MOVWF       TBLPTR+1 
0x0088	0x0E00      	MOVLW       0
0x008A	0x22F7      	ADDWFC      TBLPTR+1, 1 
0x008C	0x0E00      	MOVLW       higher_addr(seg_for_CC_L0)
0x008E	0x6EF8      	MOVWF       TBLPTR+2 
0x0090	0x0E00      	MOVLW       0
0x0092	0x22F8      	ADDWFC      TBLPTR+2, 1 
0x0094	0x0009      	TBLRD*+
0x0096	0xF000CFF5  	MOVFF       TABLAT, R0
;main.c, 40 :: 		}
L_end_seg_for:
0x009A	0x0012      	RETURN      0
; end of _seg_for
_enable_pos:
;main.c, 31 :: 		void enable_pos(unsigned char pos){
;main.c, 32 :: 		LATA = (unsigned char) (1u << pos);
0x009C	0xF001C01C  	MOVFF       FARG_enable_pos_pos, R1
0x00A0	0x0E01      	MOVLW       1
0x00A2	0x6E00      	MOVWF       R0 
0x00A4	0x5001      	MOVF        R1, 0 
L__enable_pos19:
0x00A6	0xE004      	BZ          L__enable_pos20
0x00A8	0x3600      	RLCF        R0, 1 
0x00AA	0x9000      	BCF         R0, 0 
0x00AC	0x0FFF      	ADDLW       255
0x00AE	0xD7FB      	BRA         L__enable_pos19
L__enable_pos20:
0x00B0	0xFF89C000  	MOVFF       R0, LATA
;main.c, 33 :: 		}
L_end_enable_pos:
0x00B4	0x0012      	RETURN      0
; end of _enable_pos
___CC2DW:
;__Lib_System.c, 24 :: 		void __CC2DW()
;__Lib_System.c, 27 :: 		_CC2DL_Loop1:
_CC2DL_Loop1:
;__Lib_System.c, 28 :: 		TBLRD*+
0x00B6	0x0009      	TBLRD*+
;__Lib_System.c, 29 :: 		MOVFF TABLAT, POSTINC1
0x00B8	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c, 30 :: 		DECF   R0, 1
0x00BC	0x0600      	DECF        R0, 1, 0
;__Lib_System.c, 31 :: 		BNZ _CC2DL_Loop1
0x00BE	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c, 32 :: 		DECF   R1, 1
0x00C0	0x0601      	DECF        R1, 1, 0
;__Lib_System.c, 33 :: 		BNZ _CC2DL_Loop1
0x00C2	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c, 35 :: 		}
L_end___CC2DW:
0x00C4	0x0012      	RETURN      0
; end of ___CC2DW
_split4:
;main.c, 43 :: 		unsigned char *h, unsigned char *th){
;main.c, 44 :: 		*u = v % 10u;
0x00C6	0x0E0A      	MOVLW       10
0x00C8	0x6E04      	MOVWF       R4 
0x00CA	0x0E00      	MOVLW       0
0x00CC	0x6E05      	MOVWF       R4+1 
0x00CE	0xF000C01C  	MOVFF       FARG_split4_v, R0
0x00D2	0xF001C01D  	MOVFF       FARG_split4_v+1, R0+1
0x00D6	0xDFB1      	RCALL       _Div_16X16_U
0x00D8	0xF000C008  	MOVFF       R8, R0
0x00DC	0xF001C009  	MOVFF       R8+1, R0+1
0x00E0	0xFFE1C01E  	MOVFF       FARG_split4_u, FSR1L
0x00E4	0xFFE2C01F  	MOVFF       FARG_split4_u+1, FSR1H
0x00E8	0xFFE6C000  	MOVFF       R0, POSTINC1
;main.c, 45 :: 		*t = (v / 10u) % 10u;
0x00EC	0x0E0A      	MOVLW       10
0x00EE	0x6E04      	MOVWF       R4 
0x00F0	0x0E00      	MOVLW       0
0x00F2	0x6E05      	MOVWF       R4+1 
0x00F4	0xF000C01C  	MOVFF       FARG_split4_v, R0
0x00F8	0xF001C01D  	MOVFF       FARG_split4_v+1, R0+1
0x00FC	0xDF9E      	RCALL       _Div_16X16_U
0x00FE	0x0E0A      	MOVLW       10
0x0100	0x6E04      	MOVWF       R4 
0x0102	0x0E00      	MOVLW       0
0x0104	0x6E05      	MOVWF       R4+1 
0x0106	0xDF99      	RCALL       _Div_16X16_U
0x0108	0xF000C008  	MOVFF       R8, R0
0x010C	0xF001C009  	MOVFF       R8+1, R0+1
0x0110	0xFFE1C020  	MOVFF       FARG_split4_t, FSR1L
0x0114	0xFFE2C021  	MOVFF       FARG_split4_t+1, FSR1H
0x0118	0xFFE6C000  	MOVFF       R0, POSTINC1
;main.c, 46 :: 		*h = (v / 100u) % 10u;
0x011C	0x0E64      	MOVLW       100
0x011E	0x6E04      	MOVWF       R4 
0x0120	0x0E00      	MOVLW       0
0x0122	0x6E05      	MOVWF       R4+1 
0x0124	0xF000C01C  	MOVFF       FARG_split4_v, R0
0x0128	0xF001C01D  	MOVFF       FARG_split4_v+1, R0+1
0x012C	0xDF86      	RCALL       _Div_16X16_U
0x012E	0x0E0A      	MOVLW       10
0x0130	0x6E04      	MOVWF       R4 
0x0132	0x0E00      	MOVLW       0
0x0134	0x6E05      	MOVWF       R4+1 
0x0136	0xDF81      	RCALL       _Div_16X16_U
0x0138	0xF000C008  	MOVFF       R8, R0
0x013C	0xF001C009  	MOVFF       R8+1, R0+1
0x0140	0xFFE1C022  	MOVFF       FARG_split4_h, FSR1L
0x0144	0xFFE2C023  	MOVFF       FARG_split4_h+1, FSR1H
0x0148	0xFFE6C000  	MOVFF       R0, POSTINC1
;main.c, 47 :: 		*th = (v / 1000u)% 10u;
0x014C	0x0EE8      	MOVLW       232
0x014E	0x6E04      	MOVWF       R4 
0x0150	0x0E03      	MOVLW       3
0x0152	0x6E05      	MOVWF       R4+1 
0x0154	0xF000C01C  	MOVFF       FARG_split4_v, R0
0x0158	0xF001C01D  	MOVFF       FARG_split4_v+1, R0+1
0x015C	0xDF6E      	RCALL       _Div_16X16_U
0x015E	0x0E0A      	MOVLW       10
0x0160	0x6E04      	MOVWF       R4 
0x0162	0x0E00      	MOVLW       0
0x0164	0x6E05      	MOVWF       R4+1 
0x0166	0xDF69      	RCALL       _Div_16X16_U
0x0168	0xF000C008  	MOVFF       R8, R0
0x016C	0xF001C009  	MOVFF       R8+1, R0+1
0x0170	0xFFE1C024  	MOVFF       FARG_split4_th, FSR1L
0x0174	0xFFE2C025  	MOVFF       FARG_split4_th+1, FSR1H
0x0178	0xFFE6C000  	MOVFF       R0, POSTINC1
;main.c, 48 :: 		}
L_end_split4:
0x017C	0x0012      	RETURN      0
; end of _split4
_all_off:
;main.c, 27 :: 		void all_off(){
;main.c, 28 :: 		LATA = 0x00;
0x017E	0x6A89      	CLRF        LATA 
;main.c, 29 :: 		}
L_end_all_off:
0x0180	0x0012      	RETURN      0
; end of _all_off
___FillZeros:
;__Lib_System.c, 18 :: 		void __FillZeros()
;__Lib_System.c, 20 :: 		while ( FSR0 > FSR1 )
L___FillZeros1:
0x0182	0x50EA      	MOVF        FSR0+1, 0 
0x0184	0x5CE2      	SUBWF       FSR1+1, 0 
0x0186	0xE102      	BNZ         L____FillZeros12
0x0188	0x50E9      	MOVF        FSR0, 0 
0x018A	0x5CE1      	SUBWF       FSR1, 0 
L____FillZeros12:
0x018C	0xE202      	BC          L___FillZeros2
;__Lib_System.c, 21 :: 		POSTINC1 = 0;
0x018E	0x6AE6      	CLRF        POSTINC1 
0x0190	0xD7F8      	BRA         L___FillZeros1
L___FillZeros2:
;__Lib_System.c, 22 :: 		}
L_end___FillZeros:
0x0192	0x0012      	RETURN      0
; end of ___FillZeros
_ADC_Init_Custom:
;main.c, 50 :: 		void ADC_Init_Custom(void){
;main.c, 51 :: 		ANSELE = 0x02; // bit1=1 makes RE1 analog (AN6)
0x0194	0x0E02      	MOVLW       2
0x0196	0x010F      	MOVLB       15
0x0198	0x6F3C      	MOVWF       ANSELE, 1
;main.c, 52 :: 		TRISE1_bit = 1; // RE1 as input
0x019A	0x8296      	BSF         TRISE1_bit, BitPos(TRISE1_bit+0) 
;main.c, 53 :: 		ADCON1 = 0x00; // Vref+ = VDD, Vref- = VSS (ties ADC scale to J5)
0x019C	0x6AC1      	CLRF        ADCON1 
;main.c, 54 :: 		ADCON2 = 0xA9; // right-justified result; safe acquisition and ADC clock
0x019E	0x0EA9      	MOVLW       169
0x01A0	0x6EC0      	MOVWF       ADCON2 
;main.c, 55 :: 		}
L_end_ADC_Init_Custom:
0x01A2	0x0012      	RETURN      0
; end of _ADC_Init_Custom
_ADC_Get_Sample:
;main.c, 57 :: 		unsigned int ADC_Get_Sample(unsigned char ch){
;main.c, 58 :: 		ADCON0 = (unsigned char)(ch << 2); // select channel in CHS bits
0x01A4	0xF000C01C  	MOVFF       FARG_ADC_Get_Sample_ch, R0
0x01A8	0x3600      	RLCF        R0, 1 
0x01AA	0x9000      	BCF         R0, 0 
0x01AC	0x3600      	RLCF        R0, 1 
0x01AE	0x9000      	BCF         R0, 0 
0x01B0	0xFFC2C000  	MOVFF       R0, ADCON0
;main.c, 59 :: 		ADCON0.F0 = 1; // ADON = 1 turns the ADC on
0x01B4	0x80C2      	BSF         ADCON0, 0 
;main.c, 60 :: 		Delay_ms(2); // let the sample-and-hold capacitor charge
0x01B6	0x0E15      	MOVLW       21
0x01B8	0x6E0C      	MOVWF       R12, 0
0x01BA	0x0EC6      	MOVLW       198
0x01BC	0x6E0D      	MOVWF       R13, 0
L_ADC_Get_Sample0:
0x01BE	0x2E0D      	DECFSZ      R13, 1, 0
0x01C0	0xD7FE      	BRA         L_ADC_Get_Sample0
0x01C2	0x2E0C      	DECFSZ      R12, 1, 0
0x01C4	0xD7FC      	BRA         L_ADC_Get_Sample0
0x01C6	0x0000      	NOP
;main.c, 61 :: 		ADCON0.F1 = 1; // GO/DONE = 1 starts conversion
0x01C8	0x82C2      	BSF         ADCON0, 1 
;main.c, 62 :: 		while(ADCON0.F1){} // wait until GO/DONE returns to 0
L_ADC_Get_Sample1:
0x01CA	0xA2C2      	BTFSS       ADCON0, 1 
0x01CC	0xD001      	BRA         L_ADC_Get_Sample2
0x01CE	0xD7FD      	BRA         L_ADC_Get_Sample1
L_ADC_Get_Sample2:
;main.c, 63 :: 		return (unsigned int)((((unsigned int)ADRESH) << 8) | ADRESL); // 10-bit value
0x01D0	0xF003CFC4  	MOVFF       ADRESH, R3
0x01D4	0x0E00      	MOVLW       0
0x01D6	0x6E04      	MOVWF       R3+1 
0x01D8	0xF001C003  	MOVFF       R3, R0+1
0x01DC	0x6A00      	CLRF        R0 
0x01DE	0x50C3      	MOVF        ADRESL, 0 
0x01E0	0x1200      	IORWF       R0, 1 
0x01E2	0x0E00      	MOVLW       0
0x01E4	0x1201      	IORWF       R0+1, 1 
;main.c, 64 :: 		}
L_end_ADC_Get_Sample:
0x01E6	0x0012      	RETURN      0
; end of _ADC_Get_Sample
0x01E8	0xF001EC90  	CALL        800, 0
_main:
;main.c, 67 :: 		int main(void)
;main.c, 69 :: 		unsigned char pos=0,th=0, h=0, t=0, u=0;
0x01EC	0x6A15      	CLRF        main_pos_L0 
0x01EE	0x6A16      	CLRF        main_th_L0 
0x01F0	0x6A17      	CLRF        main_h_L0 
0x01F2	0x6A18      	CLRF        main_t_L0 
0x01F4	0x6A19      	CLRF        main_u_L0 
0x01F6	0x6A1A      	CLRF        main_adc_L0 
0x01F8	0x6A1B      	CLRF        main_adc_L0+1 
;main.c, 71 :: 		ANSELA = 0; ANSELB = 0; ANSELD = 0;
0x01FA	0x010F      	MOVLB       15
0x01FC	0x6B38      	CLRF        ANSELA, 1
0x01FE	0x6B39      	CLRF        ANSELB, 1
0x0200	0x6B3B      	CLRF        ANSELD, 1
;main.c, 72 :: 		CM1CON0 = 0; CM2CON0 = 0;
0x0202	0x6A79      	CLRF        CM1CON0 
0x0204	0x6A78      	CLRF        CM2CON0 
;main.c, 73 :: 		TRISD = 0;
0x0206	0x6A95      	CLRF        TRISD 
;main.c, 74 :: 		TRISA0_bit = 0; TRISA1_bit = 0; TRISA2_bit = 0; TRISA3_bit = 0;
0x0208	0x9092      	BCF         TRISA0_bit, BitPos(TRISA0_bit+0) 
0x020A	0x9292      	BCF         TRISA1_bit, BitPos(TRISA1_bit+0) 
0x020C	0x9492      	BCF         TRISA2_bit, BitPos(TRISA2_bit+0) 
0x020E	0x9692      	BCF         TRISA3_bit, BitPos(TRISA3_bit+0) 
;main.c, 75 :: 		LATD = 0;
0x0210	0x6A8C      	CLRF        LATD 
;main.c, 76 :: 		all_off();
0x0212	0xDFB5      	RCALL       _all_off
;main.c, 78 :: 		ADC_Init_Custom(); // enable AN6 on RE1
0x0214	0xDFBF      	RCALL       _ADC_Init_Custom
;main.c, 80 :: 		while (1)
L_main3:
;main.c, 97 :: 		if(pos==0u){
0x0216	0x5015      	MOVF        main_pos_L0, 0 
0x0218	0x0A00      	XORLW       0
0x021A	0xE126      	BNZ         L_main5
;main.c, 98 :: 		adc = ADC_Get_Sample(6); // read AN6 = RE1
0x021C	0x0E06      	MOVLW       6
0x021E	0x6E1C      	MOVWF       FARG_ADC_Get_Sample_ch 
0x0220	0xDFC1      	RCALL       _ADC_Get_Sample
0x0222	0xF01AC000  	MOVFF       R0, main_adc_L0
0x0226	0xF01BC001  	MOVFF       R0+1, main_adc_L0+1
;main.c, 99 :: 		if(adc>9999u) adc=9999u; // clamp so it fits 4 digits
0x022A	0x5001      	MOVF        R0+1, 0 
0x022C	0x0827      	SUBLW       39
0x022E	0xE102      	BNZ         L__main26
0x0230	0x5000      	MOVF        R0, 0 
0x0232	0x080F      	SUBLW       15
L__main26:
0x0234	0xE204      	BC          L_main6
0x0236	0x0E0F      	MOVLW       15
0x0238	0x6E1A      	MOVWF       main_adc_L0 
0x023A	0x0E27      	MOVLW       39
0x023C	0x6E1B      	MOVWF       main_adc_L0+1 
L_main6:
;main.c, 100 :: 		split4(adc,&u,&t,&h,&th);
0x023E	0xF01CC01A  	MOVFF       main_adc_L0, FARG_split4_v
0x0242	0xF01DC01B  	MOVFF       main_adc_L0+1, FARG_split4_v+1
0x0246	0x0E19      	MOVLW       main_u_L0
0x0248	0x6E1E      	MOVWF       FARG_split4_u 
0x024A	0x0E00      	MOVLW       hi_addr(main_u_L0)
0x024C	0x6E1F      	MOVWF       FARG_split4_u+1 
0x024E	0x0E18      	MOVLW       main_t_L0
0x0250	0x6E20      	MOVWF       FARG_split4_t 
0x0252	0x0E00      	MOVLW       hi_addr(main_t_L0)
0x0254	0x6E21      	MOVWF       FARG_split4_t+1 
0x0256	0x0E17      	MOVLW       main_h_L0
0x0258	0x6E22      	MOVWF       FARG_split4_h 
0x025A	0x0E00      	MOVLW       hi_addr(main_h_L0)
0x025C	0x6E23      	MOVWF       FARG_split4_h+1 
0x025E	0x0E16      	MOVLW       main_th_L0
0x0260	0x6E24      	MOVWF       FARG_split4_th 
0x0262	0x0E00      	MOVLW       hi_addr(main_th_L0)
0x0264	0x6E25      	MOVWF       FARG_split4_th+1 
0x0266	0xDF2F      	RCALL       _split4
;main.c, 101 :: 		}
L_main5:
;main.c, 102 :: 		all_off();LATD=0;Delay_ms(BLANK_US);
0x0268	0xDF8A      	RCALL       _all_off
0x026A	0x6A8C      	CLRF        LATD 
0x026C	0x0E04      	MOVLW       4
0x026E	0x6E0B      	MOVWF       R11, 0
0x0270	0x0E40      	MOVLW       64
0x0272	0x6E0C      	MOVWF       R12, 0
0x0274	0x0E26      	MOVLW       38
0x0276	0x6E0D      	MOVWF       R13, 0
L_main7:
0x0278	0x2E0D      	DECFSZ      R13, 1, 0
0x027A	0xD7FE      	BRA         L_main7
0x027C	0x2E0C      	DECFSZ      R12, 1, 0
0x027E	0xD7FC      	BRA         L_main7
0x0280	0x2E0B      	DECFSZ      R11, 1, 0
0x0282	0xD7FA      	BRA         L_main7
0x0284	0x0000      	NOP
;main.c, 103 :: 		if (pos==0u) LATD=seg_for(u);
0x0286	0x5015      	MOVF        main_pos_L0, 0 
0x0288	0x0A00      	XORLW       0
0x028A	0xE106      	BNZ         L_main8
0x028C	0xF01CC019  	MOVFF       main_u_L0, FARG_seg_for_d
0x0290	0xDEEF      	RCALL       _seg_for
0x0292	0xFF8CC000  	MOVFF       R0, LATD
0x0296	0xD017      	BRA         L_main9
L_main8:
;main.c, 104 :: 		else if (pos==1u) LATD=seg_for(t);
0x0298	0x5015      	MOVF        main_pos_L0, 0 
0x029A	0x0A01      	XORLW       1
0x029C	0xE106      	BNZ         L_main10
0x029E	0xF01CC018  	MOVFF       main_t_L0, FARG_seg_for_d
0x02A2	0xDEE6      	RCALL       _seg_for
0x02A4	0xFF8CC000  	MOVFF       R0, LATD
0x02A8	0xD00E      	BRA         L_main11
L_main10:
;main.c, 105 :: 		else if (pos==2u) LATD=seg_for(h);
0x02AA	0x5015      	MOVF        main_pos_L0, 0 
0x02AC	0x0A02      	XORLW       2
0x02AE	0xE106      	BNZ         L_main12
0x02B0	0xF01CC017  	MOVFF       main_h_L0, FARG_seg_for_d
0x02B4	0xDEDD      	RCALL       _seg_for
0x02B6	0xFF8CC000  	MOVFF       R0, LATD
0x02BA	0xD005      	BRA         L_main13
L_main12:
;main.c, 106 :: 		else LATD=seg_for(th);
0x02BC	0xF01CC016  	MOVFF       main_th_L0, FARG_seg_for_d
0x02C0	0xDED7      	RCALL       _seg_for
0x02C2	0xFF8CC000  	MOVFF       R0, LATD
L_main13:
L_main11:
L_main9:
;main.c, 107 :: 		enable_pos(pos); Delay_ms(SCAN_ON_US);
0x02C6	0xF01CC015  	MOVFF       main_pos_L0, FARG_enable_pos_pos
0x02CA	0xDEE8      	RCALL       _enable_pos
0x02CC	0x0E25      	MOVLW       37
0x02CE	0x6E0B      	MOVWF       R11, 0
0x02D0	0x0E87      	MOVLW       135
0x02D2	0x6E0C      	MOVWF       R12, 0
0x02D4	0x0E8B      	MOVLW       139
0x02D6	0x6E0D      	MOVWF       R13, 0
L_main14:
0x02D8	0x2E0D      	DECFSZ      R13, 1, 0
0x02DA	0xD7FE      	BRA         L_main14
0x02DC	0x2E0C      	DECFSZ      R12, 1, 0
0x02DE	0xD7FC      	BRA         L_main14
0x02E0	0x2E0B      	DECFSZ      R11, 1, 0
0x02E2	0xD7FA      	BRA         L_main14
0x02E4	0x0000      	NOP
0x02E6	0x0000      	NOP
;main.c, 108 :: 		all_off(); LATD=0; Delay_ms(BLANK_US);
0x02E8	0xDF4A      	RCALL       _all_off
0x02EA	0x6A8C      	CLRF        LATD 
0x02EC	0x0E04      	MOVLW       4
0x02EE	0x6E0B      	MOVWF       R11, 0
0x02F0	0x0E40      	MOVLW       64
0x02F2	0x6E0C      	MOVWF       R12, 0
0x02F4	0x0E26      	MOVLW       38
0x02F6	0x6E0D      	MOVWF       R13, 0
L_main15:
0x02F8	0x2E0D      	DECFSZ      R13, 1, 0
0x02FA	0xD7FE      	BRA         L_main15
0x02FC	0x2E0C      	DECFSZ      R12, 1, 0
0x02FE	0xD7FC      	BRA         L_main15
0x0300	0x2E0B      	DECFSZ      R11, 1, 0
0x0302	0xD7FA      	BRA         L_main15
0x0304	0x0000      	NOP
;main.c, 110 :: 		pos++; if(pos>=4u) pos=0u;
0x0306	0x2A15      	INCF        main_pos_L0, 1 
0x0308	0x0E04      	MOVLW       4
0x030A	0x5C15      	SUBWF       main_pos_L0, 0 
0x030C	0xB0D8      	BTFSC       STATUS, 0 
0x030E	0x6A15      	CLRF        main_pos_L0 
L_main16:
;main.c, 113 :: 		}
0x0310	0xD782      	BRA         L_main3
;main.c, 115 :: 		return 0;
;main.c, 116 :: 		}
L_end_main:
0x0312	0xD7FF      	BRA         $+0
; end of _main
0x0320	0x0012      	RETURN      0
;main.c,36 :: seg_for_CC_L0
0x0314	0x063F ;seg_for_CC_L0+0
0x0316	0x4F5B ;seg_for_CC_L0+2
0x0318	0x6D66 ;seg_for_CC_L0+4
0x031A	0x077D ;seg_for_CC_L0+6
0x031C	0x6F7F ;seg_for_CC_L0+8
; end of seg_for_CC_L0
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x001C      [30]    _Div_8X8_U
0x003A      [54]    _Div_16X16_U
0x0070      [44]    _seg_for
0x009C      [26]    _enable_pos
0x00B6      [16]    ___CC2DW
0x00C6     [184]    _split4
0x017E       [4]    _all_off
0x0182      [18]    ___FillZeros
0x0194      [16]    _ADC_Init_Custom
0x01A4      [68]    _ADC_Get_Sample
0x01E8     [300]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0015       [1]    main_pos_L0
0x0016       [1]    main_th_L0
0x0017       [1]    main_h_L0
0x0018       [1]    main_t_L0
0x0019       [1]    main_u_L0
0x001A       [2]    main_adc_L0
0x001C       [1]    FARG_ADC_Get_Sample_ch
0x001C       [1]    FARG_seg_for_d
0x001C       [1]    FARG_enable_pos_pos
0x001C       [2]    FARG_split4_v
0x001E       [2]    FARG_split4_u
0x0020       [2]    FARG_split4_t
0x0022       [2]    FARG_split4_h
0x0024       [2]    FARG_split4_th
0x0F38       [1]    ANSELA
0x0F39       [1]    ANSELB
0x0F3B       [1]    ANSELD
0x0F3C       [1]    ANSELE
0x0F78       [1]    CM2CON0
0x0F79       [1]    CM1CON0
0x0F89       [1]    LATA
0x0F8C       [1]    LATD
0x0F92       [0]    TRISA1_bit
0x0F92       [0]    TRISA0_bit
0x0F92       [0]    TRISA3_bit
0x0F92       [0]    TRISA2_bit
0x0F95       [1]    TRISD
0x0F96       [0]    TRISE1_bit
0x0FC0       [1]    ADCON2
0x0FC1       [1]    ADCON1
0x0FC2       [1]    ADCON0
0x0FC3       [1]    ADRESL
0x0FC4       [1]    ADRESH
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [2]    FSR1
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [2]    FSR0
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF6       [3]    TBLPTR
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x0314      [10]    seg_for_CC_L0
